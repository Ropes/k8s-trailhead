/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1

import (
	v1 "github.com/ropes/k8s-trailhead/pkg/apis/trailhead/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SimpleSpecLister helps list SimpleSpecs.
type SimpleSpecLister interface {
	// List lists all SimpleSpecs in the indexer.
	List(selector labels.Selector) (ret []*v1.SimpleSpec, err error)
	// SimpleSpecs returns an object that can list and get SimpleSpecs.
	SimpleSpecs(namespace string) SimpleSpecNamespaceLister
	SimpleSpecListerExpansion
}

// simpleSpecLister implements the SimpleSpecLister interface.
type simpleSpecLister struct {
	indexer cache.Indexer
}

// NewSimpleSpecLister returns a new SimpleSpecLister.
func NewSimpleSpecLister(indexer cache.Indexer) SimpleSpecLister {
	return &simpleSpecLister{indexer: indexer}
}

// List lists all SimpleSpecs in the indexer.
func (s *simpleSpecLister) List(selector labels.Selector) (ret []*v1.SimpleSpec, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SimpleSpec))
	})
	return ret, err
}

// SimpleSpecs returns an object that can list and get SimpleSpecs.
func (s *simpleSpecLister) SimpleSpecs(namespace string) SimpleSpecNamespaceLister {
	return simpleSpecNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SimpleSpecNamespaceLister helps list and get SimpleSpecs.
type SimpleSpecNamespaceLister interface {
	// List lists all SimpleSpecs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.SimpleSpec, err error)
	// Get retrieves the SimpleSpec from the indexer for a given namespace and name.
	Get(name string) (*v1.SimpleSpec, error)
	SimpleSpecNamespaceListerExpansion
}

// simpleSpecNamespaceLister implements the SimpleSpecNamespaceLister
// interface.
type simpleSpecNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SimpleSpecs in the indexer for a given namespace.
func (s simpleSpecNamespaceLister) List(selector labels.Selector) (ret []*v1.SimpleSpec, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SimpleSpec))
	})
	return ret, err
}

// Get retrieves the SimpleSpec from the indexer for a given namespace and name.
func (s simpleSpecNamespaceLister) Get(name string) (*v1.SimpleSpec, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("simplespec"), name)
	}
	return obj.(*v1.SimpleSpec), nil
}
